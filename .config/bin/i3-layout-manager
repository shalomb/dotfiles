#!/bin/bash

set -eu
set -xv

active_outputs=( $(xrandr -q | grep -Po '^\K(\S+)(?= connected)') )
active_workspaces=$( i3-msg -t get_workspaces )

function get_output {
  local pattern="$1"
  printf '%q\n' "${active_outputs[@]}" | grep -E "$1"
}

laptop_output=$(  get_output eDP-?1  )
if (( ${#active_outputs[@]} > 1 )); then
  external_output_1=$( get_output '^DP-?[0-9]-1|HDMI-?1' )
  external_output_2=$( get_output '^DP-?[0-9]-2|HDMI-?2' || echo $external_output_1 )
fi

function is-workspace-available {
  local workspace=$1
  jq -e -r '
    .[] | select(.name=="'"$workspace"'")
  ' &>/dev/null <<<"$active_workspaces"
}

function move-workspace-to-output {
  local workspace="$1"
  local output="$2"

  echo "$workspace -> $output"

  is-workspace-available "$workspace" &&
    i3-msg "workspace $workspace, move workspace to output $output"
}

function dock {

  if (( ${#active_outputs[@]} == 1 )); then
    echo "Only ${#active_outputs[@]} output (${active_outputs[@]}) active."
    echo "ERROR: Device appears to be undocked, cannot continue .." >&2
    return
  fi

  xrandr --output "$external_output_1" --off
  xrandr --output "$external_output_1" --off

  xrandr --output "$external_output_1" \
          --right-of "$laptop_output" --auto --primary

  if [[ $external_output_1 != $external_output_2 ]]; then
    xrandr --output "$external_output_2"    \
            --right-of "$external_output_1" --auto
  fi

  declare -A workspace_output_map

  workspace_output_map[0]="$laptop_output"
  workspace_output_map[p]="$laptop_output"

  workspace_output_map[1]="$external_output_1"
  workspace_output_map[2]="$external_output_1"
  workspace_output_map[3]="$external_output_1"
  workspace_output_map[4]="$external_output_1"
  workspace_output_map[5]="$external_output_1"

  workspace_output_map[6]="$external_output_2"
  workspace_output_map[7]="$external_output_2"
  workspace_output_map[8]="$external_output_2"
  workspace_output_map[9]="$external_output_2"
  workspace_output_map[2]="$external_output_2"

  workspace_output_map[q]="$external_output_1"
  workspace_output_map[w]="$external_output_1"

  workspace_output_map[f]="$external_output_2"
  workspace_output_map[m]="$external_output_2"
  workspace_output_map[s]="$external_output_2"
  workspace_output_map[e]="$external_output_2"

  for i in ${!workspace_output_map[@]}; do
    if ! move-workspace-to-output "$i" "${workspace_output_map[$i]}"; then
      echo "Unable to move workspace $i to output ${workspace_output_map[$i]}" >&2
    fi
  done

}

function undock {

  workspaces=(
    $(  jq -r '
          .[] | select(.output != "'"$laptop_output"'").name
        ' <<<"$active_workspaces" | sort
     )
  )

  for i in "${workspaces[@]}"; do
    if ! move-workspace-to-output "$i" "$laptop_output"; then
      echo "Unable to move workspace $i to output $laptop_output" >&2
    fi
  done

  xrandr --output "$laptop_output" --auto --primary

  for output in "${active_outputs[@]:1: ${#active_outputs[@]}}"; do
    xrandr --output "$output" --off || true
  done

}


cmd="$1"

while getopts 'aduhx' opt; do
  case "$opt" in
    a)
      if (( ${#active_outputs[@]} >= 1 )); then
        dock
      fi
    ;;
    d)
      dock
    ;;
    h)
      echo 'pass one of d|u'
    ;;
    u)
      undock
    ;;
    x)
      set -xv
    ;;
  esac
done

# shift $((OPTIND -1))
