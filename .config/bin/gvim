#!/usr/bin/perl -l

# ~/.bin/gvim

#   - wrapper around the real gvim to improve server reuse
#   - Provides a "graphical" vim reusing tmux or a terminal emulator
#     if gvim is not installed

# Improvements on the SO post
#  http://stackoverflow.com/a/8598196/742600

# (c) 2017, Shalom Bhooshi <s.bhooshi/gmail.com>

use v5.10;
use strict;
use warnings;
use File::Basename qw[dirname];
use File::Spec;
  sub fsc { File::Spec->catfile(@_) }

my $gvim = fsc(+(
            map  { fsc($_, 'gvim')    }
            grep { -x fsc($_, 'gvim') }
            grep { $_ ne dirname($0)  }
            split /:/,  $ENV{PATH}
          )[0]);

if (not defined $gvim) { # if gvim is not installed
  # TODO Start the window in a named TMUX session.
  chomp(my $tmux_target=`tmux ls -F '#{session_name}' | awk 'NR==1'`);

  if ( $tmux_target ) {
    exec { 'tmux' }
          qw[tmux new-window -t], "$tmux_target:", 'vim', @ARGV;
  }
  else {
    exec { 'x-terminal-emulator' }
          qw[x-terminal-emulator -e vim], @ARGV;
  }
}

sub gvim {
  unshift @_, '--servername', $ENV{GVIMSERVER}
    if exists $ENV{GVIMSERVER};
  exec { $gvim } $gvim, @_;
}


if (scalar @ARGV) { # args passed, reuse existing server
  unshift @ARGV, '--remote-tab-silent'
    unless /^(?:--?|\+(?:\d|\/))/ ~~ @ARGV; # unless --options passed
  gvim @ARGV;
}
else { # no args, so reuse existing servers
  chomp(my $serverlist = `gvim --serverlist`);
  if (my $server = +(split /\n+/, $serverlist)[-1]) {
    $ENV{GVIMSERVER} = $server;
    gvim '--remote-send', '<Esc>:tabnew<CR>' # new tab
  }
  else {
    gvim  # no servers, just invoke gvim
  }
}

__END__

test cases
 * gvim
 * gvim /path/to/file
 * gvim /path/to/*
 * gvim --serverlist
 * gvim +/pattern file
 * gvim +number file
 * gvim -p /path/to/file1 /path/to/file2
 * gvim -t tag filename
