#!/bin/bash

# This function sets up the
#   AWS_ACCESS_KEY_ID,
#   AWS_SECRET_ACCESS_KEY and
#   AWS_SESSION_TOKEN
# environment variables necessary for the AWS CLI (awscli)
# command to authenticate with the AWS Control Plane APIs.
# Therefore, this function is meant to be sourced directly
# into the bash shell and so should be placed into ~/.bashrc or similar.
#
# The aws command can be wrapped like so
# alias aws=aws-sts-mfa-session
#
# If a valid STS token is not present or is not cached, a new STS session
# is setup and you will be prompted for an MFA token from the virtual
# device you registered in IAM

function aws-sts-mfa-session {
  local AWS_MFA_AUTH_CODE
  : ${AWS_MFA_AUTH_CODE:=''}
  : ${AWS_MFA_PROFILE:=default}
  : ${STS_SESSION_CACHE:=~/.aws/sts-mfa-session.json}
  : ${STS_SESSION_DURATION:=86400} #24 hours

  function _aws { command aws "$@" --profile "$AWS_MFA_PROFILE"; }

  function new-sts-session {
    local mfa_device

    if ! mfa_device=$(
      _aws iam list-mfa-devices | jq -cer .MFADevices[0].SerialNumber
    ); then
      echo >&2 "ERROR: No MFA devices listed. Is \$AWS_MFA_PROFILE ($AWS_MFA_PROFILE) set?"
      return 1
    fi

    if [[ -z $AWS_MFA_AUTH_CODE ]]; then
      read -p "Enter the MFA token for $mfa_device: " -r AWS_MFA_AUTH_CODE
    fi

    if session_object=$(_aws sts get-session-token \
      --duration-seconds "$STS_SESSION_DURATION" \
      --serial-number    "$mfa_device" \
      --token-code       "$AWS_MFA_AUTH_CODE"); then
      echo "$session_object" > "$STS_SESSION_CACHE"
    else
      echo >&2 "ERROR: Unable to get an STS token. Check MFA token ($AWS_MFA_AUTH_CODE) for correctness."
      return 1
    fi

    aws-load-sts-session-from-file "$STS_SESSION_CACHE"
  }

  if [[ $1 == test ]]; then command aws sts get-caller-identity; return $?; fi
  if [[ $1 == @(refresh|login) ]]; then new-sts-session; ec=$?; command aws sts get-caller-identity; return $?; fi

  if [[ -z $AWS_ACCESS_KEY_ID             ||
        -z $AWS_SECRET_ACCESS_KEY         ||
        -z $AWS_SESSION_TOKEN             ||
        -z $AWS_SESSION_TOKEN_EXPIRY_TIME
    ]]; then
      aws-load-sts-session-from-file "$STS_SESSION_CACHE"
  fi

  local now=$(date +%s)
  (( now > AWS_SESSION_TOKEN_EXPIRY_TIME )) && { new-sts-session || return $?; }

  command aws "$@"
}

# alias aws=aws-sts-mfa-session

# Given a JSON file output by `aws sts ...`, wire up the values to the
# required environment variables for the aws(1) command to run correctly.
# This is useful both in assuming a different role (`aws sts assume-role`)
# and in setting up a new session (`aws sts get-session`), etc

function aws-load-sts-session-from-file {
  local sts_session_cache="${1:-$STS_SESSION_CACHE}"
  if ! jq -Scer .Credentials "$sts_session_cache" &>/dev/null; then
    echo >&2 "Unable to load .Credentials from '$sts_session_cache'"
  fi
  function pluck { jq -cer "$@" "$sts_session_cache"; }
  export AWS_ACCESS_KEY_ID=$(pluck '.Credentials.AccessKeyId')
  export AWS_SECRET_ACCESS_KEY=$(pluck '.Credentials.SecretAccessKey')
  export AWS_SESSION_TOKEN=$(pluck '.Credentials.SessionToken')
  export AWS_SESSION_TOKEN_EXPIRY_TIME=$(
    date '+%s' -d $(pluck '.Credentials.Expiration') || true
  )
  export AWS_ASSUMED_ROLE_ID=$(pluck '.AssumedRoleUser.AssumedRoleId')
  export AWS_ASSUMED_ROLE_ARN=$(pluck '.AssumedRoleUser.Arn')
}

function aws-whoami {
  env |
    perl -ne '
      s/(AWS_(?:SECRET_ACCESS_KEY|SESSION_TOKEN)=)(.*)/
        $1 . q[X] x 32/ex;
      /^AWS/ and print
    ' | sort | grep -P '.*='
  command aws sts get-caller-identity --output json | jq -S .
}
