#!/bin/bash

#| cdd - cd to directory
function cdd {
  query="$@"

  if [[ -d $query ]]; then
    dir="$query"; [[ $dir = ~ ]] && dir="$HOME"
  else
    dir="$PWD"
  fi

  target="$(
    find "${dir:-.}" \
      -type d \( -iname ".?*" \) -prune \
      -o -type d -print |
    fzf --sort \
        --bind=ctrl-s:toggle-sort \
        --cycle \
        --height 25% \
        --no-mouse \
        --query="$query" \
        --reverse \
        --tiebreak=index
  )"

  [[ $target == '~' ]] && target="$HOME"
  if [[ -d $target ]]; then
    cd "$target"
  else
    echo "cdd: $target: No such directory"
  fi
}

#| cdp - cd to project
function cdp {
  query="$@"
  dir="$( (cwds-list; projects-list) |
        column -t |
        fzf --bind=ctrl-s:toggle-sort \
            --cycle \
            --height 50% \
            --no-mouse \
            --query="$query" \
            --reverse \
            --tiebreak=index |
          awk '{ print $1 }'
  )"
  [[ -z $dir ]] && return
  dir="${dir//\~/$HOME}"
  [[ -d $dir ]] || { echo "$dir not a directory?" >&2; return; }
  cd "$dir"
}

#| cdr - cd to the root (of a project)
function cdr {
  local dir
  if dir=$(git rev-parse --show-toplevel); then
    cd "$dir"
  fi
}

BOLD=$(    tput bold    )
RED=$(     tput setaf 1 )
GREEN=$(   tput setaf 2 )
YELLOW=$(  tput setaf 3 )
BLUE=$(    tput setaf 4 )
MAGENTA=$( tput setaf 5 )
CYAN=$(    tput setaf 6 )
WHITE=$(   tput setaf 7 )
RESET=$(   tput sgr0    )

fz_config_base=~/.config/fz/
mkdir -p "$fz_config_base"

#| fz - File browser
function fz {

  declare -A fz_vars;
  fz_vars[fz_query]='Search term for fz'
  fz_vars[fz_preview_cmd]='Command to use when previewing items'
  fz_vars[PWD]='Current working directory'
  fz_vars[fz_file_regex]='Work on filenames matching ACK regex'
  fz_vars[fz_ignore_file_regex]='Ignore filenames matching ACK regex'
  fz_vars[fz_ignore_dir_regex]='Ignore dirnames matching ACK regex'
  fz_vars[fz_window_height]='Window height'
  fz_vars[fz_cmd_d]='Command mapped to Ctrl-d to run on selections'
  fz_vars[fz_cmd_i]='Command mapped to Ctrl-i to run on selections'
  fz_vars[fz_cmd_o]='Command mapped to Ctrl-o to run on selections'
  fz_vars[fz_cmd_m]='Command mapped to Ctrl-m to run on selections'
  fz_vars[fz_cmd_v]='Command mapped to Ctrl-v to run on selections'

  fz_cmd_m="${1:-${fz_cmd_m:-$EDITOR}}"
  fz_query="$2"
  fz_preview_cmd="less {}"
  fz_preview_cmd="bat  --color always --style=plain {}"
  fz_file_regex='.'
  fz_ignore_file_regex='^\..*'
  fz_ignore_dir_regex='^\..*'
  fz_window_height="100%"
  fz_preview_cmds_list="$fz_config_base/preview_cmds.list"

  local FZF_DEFAULT_COMMAND

  while block=$(
    FZF_DEFAULT_COMMAND="ack -r -g --ignore-file=match:'$fz_ignore_file_regex' --ignore-dir=match:'$fz_ignore_dir_regex' '$fz_file_regex'" \
    fzf \
      --ansi \
      --bind=ctrl-s:toggle-sort \
      --border \
      --cycle \
      --color 'border:#808080,info:#ffff00' \
      --header="$fz_cmd_m $fz_query [$?,$$,$PWD]" \
      --height "$fz_window_height" \
      --inline-info \
      --multi \
      --no-mouse \
      --preview="$fz_preview_cmd" \
      --print-query \
      --query="$fz_query" \
      --reverse \
      --sort \
      --tiebreak=index \
      --expect='ctrl-b,ctrl-d,ctrl-e,ctrl-f,ctrl-g,ctrl-i,ctrl-o,ctrl-m,ctrl-v'
    ); do

    fz_query=$( sed  -n '1p' <<<"$block" );
    key=$(      sed  -n '2p' <<<"$block" ); key="${key##ctrl-}"
    files=( $(  tail -n +3   <<<"$block" ) );

    [[ -z $key ]] && key=m

    for i in "${!fz_vars[@]}"; do
      echo "$BOLD$WHITE$i$RESET - [$YELLOW${!i}$RESET] $CYAN${fz_vars[$i]}$RESET"
    done | sort > "$TMP/fz_settings.txt"

    case "$key" in
      e)
        setting=$(
          < "$TMP/fz_settings.txt" \
            fzf \
              --ansi \
              --bind=ctrl-s:toggle-sort \
              --border \
              --cycle \
              --header='Settings editor' \
              --height "$fz_window_height" \
              --inline-info \
              --no-mouse \
              --reverse \
              --sort \
              --tiebreak=index \
              --tac |
            awk '{ print $1 }'
        )
        [[ -z $setting ]] && continue

        local tmpfile=$(mktemp)
        echo "${!setting}" > "$tmpfile"
        "$EDITOR" "$tmpfile"
        read -r _tv < "$tmpfile"
        read -r "$setting" <<<"${_tv:-${!setting}}"
        rm -r "$tmpfile"

        [[ $setting = PWD ]] && [[ $(pwd) != $PWD ]] && cd "$PWD"

        continue
      ;;
      g)
        while block=$(
          FZF_DEFAULT_COMMAND="ack '$fz_query'" \
            fzf --reverse ); do
          local files=( $( awk -F: '{ print $1 }' <<<"$block" ) )
          vim +/"$fz_query" "${files[@]}"
        done
      ;;
      o)
        { tail -n  1 $fz_preview_cmds_list;
          head -n -1 $fz_preview_cmds_list;
        } | awk '!a[$0]++' > $fz_preview_cmds_list.orig;
        mv $fz_preview_cmds_list.orig $fz_preview_cmds_list;

        fz_preview_cmd="$(head -n 1 "$fz_preview_cmds_list")"
      ;;
      d|f|i|m|v)
        local cmd="fz_cmd_$key"
        ${!cmd} "${files[@]}"
      ;;
      *)
        read -p "unimplemented action for '$key'" foo
        continue
      ;;
    esac

  done
}

#| gB - Git Browser
function gB {
  local query

  if ! git show "$1" &>/dev/null; then
    query="${@:->}"
    set --
  fi

  while block=$(
      git log --graph \
        --color=always \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
        --abbrev-commit --date=relative "$@" |
      fzf --ansi --multi \
          --sort \
          --bind=ctrl-s:toggle-sort \
          --reverse --query="$query" \
          --tiebreak=index \
          --no-mouse --print-query \
          --border --height 70% --cycle \
          --preview 'git show --color=always $(echo "{}" | perl -lane "print /([[:xdigit:]]\{7})/")' \
          --expect=ctrl-d,ctrl-e,ctrl-v,ctrl-f,ctrl-j,ctrl-m
    ); do

    query=$( sed  -n '1p' <<<"$block" );
    key=$(   sed  -n '2p' <<<"$block" ); key="${key##ctrl-}"
    items=$( tail -n +3   <<<"$block" );
    shasums=( $( perl -lne 'print /(\w{7})/' <<<"$block" ) )

    echo '----'
    echo "query: $query"
    echo "key:   $key"
    echo -e "items: \n$items"
    echo "sums:  ${shasums[@]}"
    echo ''
    echo -e "block: [$block\n]"
    echo '----'

    [[ -z $key ]] && key=m

    case "$key" in
      e)
        cat <<EOHELP | column | less
  ctrl-e - show this help menu
  ctrl-d - show diffs between revisions
  ctrl-f - show files at revisions
  ctrl-m - show commits
EOHELP
      ;;
      d)
        git diff "${shasums[0]}" "${shasums[1]:-HEAD}" $(
          { echo -e 'M\t.'
            git diff-tree --no-commit-id --name-status \
                -r "${shasums[0]}" "${shasums[1]:-HEAD}"
          } | fzf --ansi --sort --reverse |
              awk '{ print $2 }'
        )
      ;;
      f)
        while read -r file; do
          git show "${shasums[0]}":"$file"
        done < <( git ls-tree --name-only -r "${shasums[0]}" |
          fzf --ansi --multi --sort --reverse )
      ;;
      m)
        git show --color=always "${shasums[@]}"
      ;;
    esac

  done
}

