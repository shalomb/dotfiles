#!/bin/bash

# SYNOPSIS
#   git(1) aliases

_git_cmd=''
_git_args=()

gh_script=$BASH_SOURCE

#| gh - this screen
function gh {
  while read -r _ c _ r; do
    printf "  %-5s - %s\n" "$c" "$r"
  done < <( grep -iE '^#\|' "$gh_script" | sort ) | column -s - | "$PAGER"
}

function _git {
  local cmd="$1"; shift;
  local args=( "$@" )

  if (( ${#args[@]} == 0 )); then
    hist_index=$((HISTCMD-2))
    # Don't go messing around with history -p unless you
    # really know what it is doing.
    args=( $( history -p "!$hist_index:1*" &>/dev/null ) );
    # echo "args: ${args[@]} || ${#args[@]}"
    if [[ -n ${args[0]} ]]; then
      :;
    else
      args=( "${_git_args[@]}" )
    fi
  fi
  _git_args=( "${args[@]}" )

  command git "$cmd" "${args[@]}"
}

#| ga - git add
function ga  { _git "add"      "$@"; }
#| gd - git diff -b -w
function gd  { _git "diff" -b -w "$@"; }
#| gfbd - git flow bugfix finish
function gfbd { [[ $# = 0 ]] && set -- $(gbr); command git flow bugfix finish "$@"; }
#| gfbl - git flow bugfix list
function gfbl { command git flow bugfix list "$@"; }
#| gfbs - git flow bugfix start
function gfbs { command git flow bugfix start "$@"; }

#| gffco - <checkout feature branch>
function gffco { 
  branch="$1"
  available=( $( gffl | sed 's/\*//' | grep -iP "$1" ) )
  if (( ${#available[@]} > 1 )); then
    { echo 'Multiple branches available ..'
      printf "  %s\n" "${available[@]}";
    } >&2
  else
    gco "feature/$available"
  fi
}

#| gffd - git flow feature finish
function gffd { [[ $# = 0 ]] && set -- $(gbr); command git flow feature finish "$@"; }
#| gffl - git flow feature list
function gffl { command git flow feature list "$@"; }
#| gffs - git flow feature start
function gffs { command git flow feature start "$@"; }
#| gl - git lg
function gl  { _git "lg"       "$@"; }
#| gls - git ls
function gls { _git "ls" "$@"; }
#| glp - git lgp
function glp { _git "lgp"      "$@"; }
#| gp - git pull
function gp  { [[ $# = 0 ]] && set -- origin $(gbr); command git pull "$@"; }
#| gP - git push
function gP  { [[ $# = 0 ]] && set -- origin $(gbr); command git push "$@"; }
#| gs - git st --short
function gs  { _git "st" --short "$@"; }

#| gb - git branch
function gb  {
  if _git "branch"   "$@"; then
    [[ $# != 0 ]] && old_branch="$@"
  else
    old_branch=$(gbr);
  fi
}

#| gbd - git branch -d
function gbd {
  bye_branch=$(gbr)
  gco && command git branch -d "$bye_branch"
}

#| gbr - current branch
function gbr {
  git branch | awk '/^*/{print $2}'
}

#| gco - git checkout
function gco {
  # TODO
  # Manage a branch stack - gbpush/gbpop
  if [[ $# == 0 ]]; then
    if [[ ${old_branch-} ]]; then
      set -- "$old_branch"
    else
      set -- "develop"
    fi
  elif [[ $# == 1 ]]; then
    available=( $( git branch | sed -r -e 's/^\*//' -e 's/\ +//' | grep -iP -- "$1" ) )
    if [[ -z $available ]]; then
      { echo "No branch names match '$1', aborting .."; } >&2; return
    elif (( ${#available[@]} > 1 )); then
      { echo 'Multiple branches available ..'
        printf "  %s\n" "${available[@]}";
      } >&2
      return
    else
      set -- "$available"
    fi
  fi
  old_branch=$(gbr);
  _git "checkout" "$@";
}

# gcm - git commit -m
function gcm {
  local args=( "$@" )

  if (( ${#args[@]} == 0 )); then
    git commit
  else
    if [[ ${args[0]} != '-'* ]]; then
      args=( "$@" )
    fi
    git commit -m "${args[*]}"
  fi
}

#| g - git
    alias g=git
complete -o bashdefault -o default -o nospace -F __git_wrap__git_main g

#| gca - ga; gcm
  alias gca='ga; gcm '
#| gpom - git push origin master
 alias gpom='git push origin master'
#| gk - gitk --all
   alias gk='gitk --all &'
#| gx - gitx --all
   alias gx='gitx --all'

