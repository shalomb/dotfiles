#!/bin/bash

 ##############################################################################
#   ~/.config/bash/bashrc: executed by bash(1) for non-login shells.           #
#     Also nstalled at ~/.bashrc for legacy reasons.                           #
#                                                                              #
#   See /usr/share/doc/bash/examples/startup-files (in the package bash-doc)   #
#   for examples                                                               #
 ##############################################################################

# If not running interactively, don't do anything, just return
[[ ${-//[!i]/} ]] || return

# source ~/.profile if
#  * ~/.config/bashrc hasn't been sourced before - for interactive shells
#  * it hasn't already been marked as sourced.
if [[ -z $PROFILE_SOURCED ]]; then
  if [[ -e ~/.config/profile ]]; then
    source ~/.config/profile && PROFILE_SOURCED=1
  fi
fi

# export BASHRC_SOURCED="$BASHRC_SOURCED|$(date +%s)"
# export BASHRC_SOURCED_BY="$BASHRC_SOURCED_BY|$(ps -p $$ -o pid= -o ppid= -o comm= -o args= -o fuser=) $(date +%s)"

export FCEDIT="$EDITOR"

export IGNOREEOF=5
export TIMEFORMAT=$'\nReal: %3lR\tUser: %3lU\tSys: %3lS\tCPU: %P'

if type -P screen &> /dev/null; then
  read screen_session _ < <(screen -ls | grep "$PPID\.")
  export screen_session
fi

# Shell Options
# echo -n "setting shell options .. "
shopt -s cdable_vars
shopt -s cdspell
shopt -s checkhash
shopt -s checkwinsize
shopt -s cmdhist
shopt -s extglob
#shopt -u expand_aliases
shopt -s histappend histreedit histverify
shopt -u huponexit
shopt -s mailwarn
shopt -s no_empty_cmd_completion  # bash>=2.04 only
shopt -s sourcepath
shopt -s progcomp
shopt -s promptvars

set -o braceexpand
set -o hashall
set -o histexpand
set -o ignoreeof
set -o notify
set -o vi
# echo "done"


# ulimits
# echo -n "setting ulimits .. "
# Limit some inadvertent fork bombs.
# ulimit -Sc 0        # core dump file size i.e. no dump file
# ulimit -Sc 128000 # core dump file size
# ulimit -Sd 512000 # data segment size
# ulimit -Se 2      # max. nice value
# ulimit -Sf 512000 # max. files created
# ulimit -Sm 512000 # max. resident set size
# ulimit -Sn 122048 # open files
# ulimit -Ss 128000 # max. stack size
# ulimit -St 45     # soft max. CPU time in seconds
# ulimit -Ht 60     # hard max. CPU time in seconds
#ulimit -Su 512      # soft max. user processes
#ulimit -Hu 768      # hard max. user processes
# ulimit -Sv 512000 # max. virtual memory
# ulimit -Hv 768000
# echo done

# If this is an xterm set the title to user@host:dir
case "$TERM" in screen*|xterm*|*rxvt*)
    PROMPT_COMMAND='echo -ne "\033]0;${debian_chroot}${USER}@${screen_session:-$HOSTNAME}:$$: ${PWD/$HOME/~}\007"'
    ;;
*)
    ;;
esac

function set_cdpath () {
  CDPATH="$PWD:.:$OLDPWD:..:~:/media:/mnt"
}

# CDPATH does not seem to expand variables when cd is used
# workaround: get PROMPT_COMMAND to do the expanding
if [[ -n $PROMPT_COMMAND && $PROMPT_COMMAND != *set_cdpath* ]]; then
    PROMPT_COMMAND="$PROMPT_COMMAND ; set_cdpath ;"
else
  PROMPT_COMMAND="set_cdpath"
fi

function source() {
  # echo "$(date --rfc-3339=ns): Sourcing $@"
  builtin source "$@"
}

# reload - convenience function around source
#   * takes multiple arguments,
function reload () {
  if [[ -n "$@" ]]; then
    for f; do
      [[ -f "$f" && -r "$f" ]] && {
        if ! file -i "$f" | grep -iq binary; then
          source "$f"
        fi
      }
    done
  else
    reload  /etc/bash_completion       \
            ~/.config/bash/bashrc
  fi
}

# # Source aliases
reload  ~/.config/bash/completion \
        ~/.config/bash/aliases


if type -P dircolors &>/dev/null; then
  {
    if [[ -f ~/.dircolors && -r ~/.dircolors ]]; then
      eval "$(dircolors -b ~/.dircolors)"
    fi
  } &> /dev/null
fi


# Remove duplicates, non-existent directories from $VAR pass in.
clean_path () {
  local path
  path=${!1}
  path=(${path//:/ })
  eval "$1=\"$( perl -e ' print join ":", grep -d $_, grep !$s{$_}++, @ARGV ' ${path[@]%*/} )\""
}

clean_path PATH;    export PATH
clean_path MANPATH; export MANPATH

for script in ~/.config/bash/rc.d/{,.}*; do
  if [[ -f $script && -r $script ]]; then
    source "$script"
  fi
done

# Right, we're ready to hand over control to the user now!
# Print some informational trivia.
echo -e "$USER@$HOSTNAME/$TTY $BASH ($$|$PPID) ${BASH_VERSION} $MACHTYPE ${TMUX+"$(tmux -V) ($TMUX_PANE)"}"
uname -a

echo ''
echo -n "last login "
lastlog -u "${USER}" | tail -n 1 | sed -r -e 's/  +/ /g'
uptime
echo ''

type -P fortune &>/dev/null && fortune 2>&1 && echo ""
