#!/bin/bash

# qterm(1)                          QTERM                               qterm(1)
#
# NAME
#   qterm - lighweight {quick,quake} console.
#
# SYNOPSIS
#   qterm [toggle]
#
#   qterm [ toggle | show | hide | shade | raise |
#           lower | fullscreen | max_horz | max_vert ]
#
# DESCTIPTION
#   qterm uses the urxvt client (urxvtc) to spawn a terminal emulator hosting
#   a console (i.e. a named ('qterm:') tmux session). The tmux session is 
#   spawned if it does not exist otherwise it is attached to.
#
#   It is similar to other apps such as kuake(1), guake(1), tilda(1), etc
#   but requires little in terms of additional packages (except those 
#   listed in the DEPENDENCIES section below).
#
#   The terminal window is invoked if it is hidden or dismissed if it is 
#   active by calling this script with no arguments effectively toggling
#   the window. By mapping this script to a Window Manager's hotkey, one
#   always 'the console' at hand and a very useful one at that.
#
#   Multiple parameters can be passed to this script and they will be executed
#   in sequence. They are 
#
#     * show        -  Invoke qterm.
#     * hide        -  Dismiss qterm.
#     * toggle      -  Toggle visibility.
#     * raise       -  Toggle placement on the topmost window layer.
#     * lower       -  Toggle placement on the lowest window layer.
#     * fullscreen  -  Toggle fullscreen.
#     * max_horz    -  Toggle horizontal fullscreen.
#     * max_vert    -  Toggle vertical fullscreen.
#     * shade       -  Toggle whether or not the window is shaded.
#     * help        -  Invoke the help menu.
#
# USAGE
#   qterm   
#     # same as 'qterm toggle' - toggle the visibility of the qterm window.
#
#   qterm raise show
#     # show the qterm window after placing the qterm on the top window layer
#     #   from here on. 'raise' is a toggle.
#
#   qterm fullscreen
#     # Toggle the qterm window fullscreen from here on whether it is visible
#     #   or not. 'fullscreen' is a toggle.
#
# DEPENDENCIES
#   * rxvt-unicode-256color or rxvt-unicode
#   * tmux
#   * wmctrl
#
# BUGS
#     been launced. Wierd eh?
#
# REFERENCES
#   * "Console (video game CLI) - Wikipedia"
#     http://en.wikipedia.org/wiki/Quake-style_console
#
# AUTHOR
#   Shalom Bhooshi <s.bhooshi/gmail.com>
#
# COPYRIGHT
#   Copyright (C) 2011 Shalom Bhooshi.  
#   License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#   This is free software: you are free to change and redistribute it.
#   There is NO WARRANTY, to the extent permitted by law.
#
# qterm(1)                         QTERM                                qterm(1)

shopt -s extglob nocaseglob nocasematch

if [[ $1 = @(*help|-h) ]]; then
  cat <<EOH >&2
  qterm [ toggle | show | hide | shade | raise | lower |
          fullscreen | max_horz | max_vert ]

     show        -  Invoke qterm.
     hide        -  Dismiss qterm.
     toggle      -  Toggle visibility.
     raise       -  Toggle placement on the topmost window layer.
     lower       -  Toggle placement on the lowest window layer.
     shade       -  Toggle whether or not the window is shaded.
     fullscreen  -  Toggle fullscreen.
     max_horz    -  Toggle horizontal fullscreen.
     max_vert    -  Toggle vertical fullscreen.
     help        -  Show this message

EOH
  exit 1;
fi


qtermWinID=$(printf "0x%x" "$(wmctrl -lx | awk '/qterm.URxvt/{print $1}')")

if ! kill -0 $(pidof urxvtd) &>/dev/null; then 
  urxvtd -q -o -f || { echo "Error launching urxvtd : $!"; exit 2; };
fi

if [[ $qtermWinID = 0x0 ]]; then     # window is non-existent
  qtermSession="$(tmux ls | grep -Eio "^qterm:")"
  if [[ -z $qtermSession ]]; then
    urxvtc -name qterm -title qterm  \
       -e  tmux new-session -s qterm &
  else
    urxvtc -name qterm -title qterm     \
      -e tmux attach -t "$qtermSession" &
  fi
  exit;
fi

currentWinID=$(printf "0x%x" "$(xprop -root _NET_ACTIVE_WINDOW | awk -F"# " '{print $2}')")

if [[ $qtermWinID = $currentWinID ]]; then
  isCurrentWindow=1
fi

if (($# == 0)); then
  set -- toggle
fi

for op in "$@"; do
  case "$op" in

    toggle)
      if [[ $isCurrentWindow = 1 ]]; then
        exec "$0" hide
      else
        exec "$0" show
      fi
    ;;

    show)
      wmctrl -i -r "$qtermWinID" -b remove,shaded
      wmctrl -i -R "$qtermWinID"
    ;;

    hide)
      wmctrl -i -r "$qtermWinID" -b add,hidden
      wmctrl -i -r "$qtermWinID" -b add,skip_taskbar
      wmctrl -i -r "$qtermWinID" -T qterm   # set its name; placed here as an optimization.
    ;;

    skip_taskbar)
      wmctrl -i -r "$qtermWinID" -b toggle,skip_taskbar
    ;;

    raise)
      wmctrl -i -r "$qtermWinID" -b toggle,above
    ;;

    lower)
      wmctrl -i -r "$qtermWinID" -b toggle,below
    ;;

    shade)
      wmctrl -i -r "$qtermWinID" -b toggle,shaded
    ;;

    hide)
      wmctrl -i -r "$qtermWinID" -b toggle,hidden
    ;;

    max_vert)
      wmctrl -i -r "$qtermWinID" -b toggle,maximized_vert
    ;;

    max_horz)
      wmctrl -i -r "$qtermWinID" -b toggle,maximized_horz
    ;;

    fullscreen)
      wmctrl -i -r "$qtermWinID" -b toggle,fullscreen
    ;;

    *) # disregard parameter and default to toggle.
      if [[ $isCurrentWindow = 1 ]]; then
        exec "$0" hide
      else
        exec "$0" show
      fi
    ;;

  esac
done
