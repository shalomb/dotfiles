#!/bin/bash

# NAME
#   qterm - launch a quick terminal (using a hotkey).
#
# USAGE
#   qterm [shade|skip_taskbar|raise|lower|hide|fullscreen]
#
#   qterm   # toggles the display of the quickterm
#           # this is mapped to a hotkey in the WM
#

if [[ $1 = help ]]; then
  cat <<EOH >&2
    help
    toggles: hide raised skip_taskbar
EOH
  exit 1;
fi

qtermWinID=$(printf "0x%x" "$(wmctrl -lx | awk '/qterm.URxvt/{print $1}')")

if [[ $qtermWinID = 0x0 ]]; then
  qtermSession="$(tmux ls | grep -Eio "^qterm:")"
  if [[ -z $qtermSession ]]; then
    urxvtc -name qterm -title qterm           \
      -tr -tint black -fg \#dfdfdf -sh 60 -e  \
      tmux new-session -s qterm &
  else
    urxvtc -name qterm -title qterm           \
      -tr -tint black -fg \#dfdfdf -sh 60 -e  \
      tmux attach -t "$qtermSession" &
  fi
  exit;
fi

currentWinID=$(printf "0x%x" "$(xprop -root _NET_ACTIVE_WINDOW | awk -F"# " '{print $2}')")

wmctrl -i -r "$qtermWinID" -T qterm

[[ $qtermWinID = $currentWinID ]] && isCurrentWindow=1

# echo "$qtermWinID==$currentWinID isCurrentWindow: $isCurrentWindow" >&2

if [[ $1 = skip_taskbar ]];
then
  wmctrl -i -r "$qtermWinID" -b toggle,skip_taskbar
elif [[ $1 = raise ]];
then
  wmctrl -i -r "$qtermWinID" -b toggle,above
  wmctrl -i -R "$qtermWinID"
elif [[ $1 = lower ]];
then
  wmctrl -i -r "$qtermWinID" -b toggle,below
elif [[ $1 = shade ]];
then
  wmctrl -i -r "$qtermWinID" -b toggle,shaded
elif [[ $1 = hide ]];
then
  wmctrl -i -r "$qtermWinID" -b toggle,hidden
elif [[ $1 = max_vert ]];
then
  wmctrl -i -r "$qtermWinID" -b toggle,maximized_vert
elif [[ $1 = max_horz ]];
then
  wmctrl -i -r "$qtermWinID" -b toggle,maximized_horz
elif [[ $1 = fullscreen ]];
then
  wmctrl -i -r "$qtermWinID" -b toggle,fullscreen
elif [[ $isCurrentWindow = 1 ]];
then
  wmctrl -i -r "$qtermWinID" -b add,hidden
else
  wmctrl -i -r "$qtermWinID" -b remove,shaded
  wmctrl -i -R "$qtermWinID"
fi


# while read -r key val; do 
#   if [[ $key = _NET_WM_STATE\(ATOM\)* ]]; then
#     [[ $val = *_NET_WM_STATE_HIDDEN* ]] && isHidden=1
#   fi
#   if [[ $key = _WIN_STATE\(CARDINAL\)* ]]; then
#     [[ $val = *"= 2"* ]] && isMinimized=1
#   fi
# done < <(xprop -id "$qtermWinID")
#echo "$qtermWinID==$currentWinID isCurrentWindow: $isCurrentWindow isHidden: $isHidden isMinimized: $isMinimized";


