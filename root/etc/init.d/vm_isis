#! /bin/sh
### BEGIN INIT INFO
# Provides:          vm_isis
# Required-Start:    $virtualbox $networking $remote_fs $syslog
# Required-Stop:     $virtualbox $networking $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to start/stop vbox VMs
### END INIT INFO

# Author: Shalom Bhooshi <s.bhooshi@gmail.com>
#
# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Start the virtualbox VM : isis.xendesktop.eng.citrite.net"
VBOX_USER="unop"
VBOX_MACHINE="win_7"
NAME=vboxheadless
DAEMON=/usr/bin/$NAME
DAEMON_ARGS="--startvm $VBOX_MACHINE"
PIDFILE=/var/run/$NAME-vm_isis.pid
SCRIPTNAME=/etc/init.d/vm_isis
vboxmanage=/usr/bin/vboxmanage

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet \
	  --pidfile $PIDFILE --background --nicelevel 10 --chuid $VBOX_USER --group $VBOX_USER \
	  --exec $DAEMON -- $DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
  set -x
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	
	## start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON

	# we get start-stop-daemon to use --start here instead of --stop
	# as we use another command to stop the vm
	start-stop-daemon --start --quiet --oknodo --retry=0/30/KILL/5 \
	  --pidfile $PIDFILE --chuid $VBOX_USER --group $VBOX_USER \
	  --exec "$vboxmanage" -- controlvm "$VBOX_MACHINE" savestate 
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

do_poweroff() {
  set -x
  start-stop-daemon --start --quiet --oknodo --retry=0/30/KILL/5 \
	  --pidfile $PIDFILE --chuid $VBOX_USER --group $VBOX_USER \
	  --exec "$vboxmanage" -- controlvm "$VBOX_MACHINE" poweroff

	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"

}
#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

show_status() {
  if vboxmanage list runningvms | grep -i "^\"$VBOX_MACHINE"; then
    VBoxManage showvminfo win_7 --details --machinereadable \
      | grep -i -e '^desc' -e '^vmstate' -e '^name' \
                -e '^ostypr' -e '^cfgfile' -e '^memory' -e '^GuestOS'
    pid=$( ps aux | grep -i virtualbox | awk '/'"$VBOX_MACHINE"'/{print $2}' )
    ps u -p $pid
    perl -ple 's/\0/ /g' /proc/"$pid"/cmdline
    return 0;
  else
    log_daemon_msg "$NAME : $VBOX_MACHINE does not appear to be running."
  fi
  return 1;
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
	;;

  stop|savestate)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
	;;

  poweroff|reset)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_poweroff
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
  ;;

  status)
    show_status ${1+$@} && exit 0 || exit $?
  ;;

  #reload|force-reload)
    #
    # If do_reload() is not implemented then leave this commented out
    # and leave 'force-reload' as an alias for 'restart'.
    #
    #log_daemon_msg "Reloading $DESC" "$NAME"
    #do_reload
    #log_end_msg $?
  #;;

  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1 ;; # Old process is still running
          *) log_end_msg 1 ;; # Failed to start
        esac
      ;;
      *)
        # Failed to stop
        log_end_msg 1
      ;;
	  esac
  ;;

  *)
	  echo "Usage: $SCRIPTNAME {start|stop|savestate|status|restart|poweroff|reset}" >&2
	  exit 3
	;;

esac

:
