""" Pathogen  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
runtime bundle/pathogen/autoload/pathogen.vim
filetype off
call pathogen#helptags()
call pathogen#incubate()

"""" Options """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set more                    " page on extended output
" set nocompatible            " 

let $PAGER='less'           " less is my pager
let $LESS=$PAGER            " to reiterate - less is my pager
" set term=$TERM            " term is $TERM
set more                    " page on extended output

set backupdir=/tmp          " put backups in /tmp
set backupdir-=.            " ...and not in cwd

set hidden                  " hide, don't close, undisplayed buffers
set history=256             " lines of command history to keep

set laststatus=2            " always show status line

set statusline=
set statusline+=%1*%t\      " filename (tail)
set statusline+=%n          " buffer #
set statusline+=\%<\ \      " Where to truncate a long line
set statusline+=%a          " argument list status (e.g. 1 of 3)
set statusline+=\ 
set statusline+=%M          " modified flag
set statusline+=%R          " readonly flag
set statusline+=\ 
set statusline+=%H          " help buffer flag
set statusline+=%Y          " filetype
set statusline+=%W          " preview window flag
set statusline+=\ \ 
set statusline+=%{&ff}      " file format
set statusline+=\ 
set statusline+=%{strlen(&fenc)?&fenc:&enc}   " file encoding 
set statusline+=\ \ \ \ 
set statusline+=%{&fo}      " format options
set statusline+=\ 
set statusline+=%{v:register} " last register used
set statusline+=\ 
set statusline+=%=          " separation point for RHS items
set statusline+=%-14.(%l/%L,%c%V\ (%P)%) "line#/#ofLines,col#vCol#.%inFile
set statusline+=\ 
set statusline+=%8o,0x%06O   " byte number in file in decimal,hex
set statusline+=\ 
set statusline+=%5b,0x%04B   " value of character in decimal,hex
set statusline+=\ \ 
set statusline+=%{&sw},%{&ts},%{&et} " shiftwidth, tabstop and expandtab
set statusline+=\ 
set statusline+=%{v:foldlevel} " fold level
set statusline+=, 
set statusline+=%{indent('.')/&ts} " indent level
set statusline+=\ \ 
set statusline+=%N          " Printer page number
set statusline+=%*
"highlight User1 guifg=red gui=bold
hi User1 ctermbg=white

set shortmess=fimnrwxatIWO  " Get rid of most messages
set cmdheight=2             " Set command height to 2 to avoid netrw pains
set report=1                " Always report changes
set ruler                   " display cursor position
set showcmd                 " show command-in-progress
set showmode                " mode shown in lower left
set novisualbell            " no visual bell 
set title                   " set the term's window title 

set foldcolumn=1            " no fold column
set foldlevelstart=0        " start with all folds closed
set modeline                " enable modelines contra debian, TODO: secure this

set nostartofline           " try and keep cursor from moving to BOL
set formatoptions=r         " r - re-insert comment leader on newline
set terse                   " add 's' to 'shortmess'
set timeout                 " allow keys to timeout
set wildmenu                " enable menu of completions
set wildmode=longest,list,full " longest common string, then each full match
set wildcharm=<C-Z>         " keybinding that charms the wild complete
set completeopt=longest,menuone,preview

set mouse=                  " mouse is available in all modes
if has('mouse')
  set mousemodel=popup_setpos
  set mousehide               " hide the mouse when busy
endif

set backspace=2             " correct backspace to return to previous lines

set incsearch               " searches are displayed on-the-fly
set hlsearch                " searches are highlighted
set ignorecase              " ignore case when searching
set smartcase               " except when searching upper case patterns
set wrapscan                " wrap around EOF on searches

set tabstop=2               " 2 characters
set softtabstop=2           " tabs are always 'tabstop' positions
set shiftwidth=2            " 2 characters
set expandtab               " expand tabs to spaces
set smarttab                " smart tab size
set shiftround              " indent rounded to shiftwidth

set number                  " turn on line numbers
set numberwidth=4           " with 3 digits by default

set wrap                    " wrap long lines
set wrapmargin=2            " clear 2 at the RHS
set linebreak               " soft-break at non-word characters
set nolist                  " soft-wrap seems to play up if list is set
set splitright              " create new vsplits to the right of current window
set splitbelow              " create new splits to the bottom of current window

set scrolloff=2             " always keep 2 lines in view at top/bottom margin
set sidescroll=2            " ss: only scroll horizontally little by little
set sidescrolloff=2         " siso: places a couple columns between the current column and the screen edge
set autoread                " autoload file when modified externally
set hidden                  " mark modified buffers hidden automatically

filetype plugin indent on   " try and guess what type of file
filetype detect
syntax enable               " enable syntax highlighting
syntax on                   " start highlighting
set fileformat=unix         " no CR-LF, just plain newlines

set autoindent              " try and be smart about indenting
set smartindent             " C like indenting
set cindent                 " done better
set copyindent              " make autoindent use the same characters to indent
set nojoinspaces      

set showmatch               " show matching braces, parantheses, brackets, etc
set matchpairs+=<:>         " show and % jump matching brackets
set matchpairs+=(:)
set matchpairs+={:}
set matchpairs+=[:]
set matchpairs+==:;         " variable assignments, etc
set matchtime=5             " Show match for 0.2 sec;
set showcmd                 " show input command??;

set pastetoggle=<F11>

set spelllang=en_gb
set spellfile=~/.vim/spell/en.utf-8.add
set dictionary+=/usr/share/dict/words
set complete-=k             " disable dictionary completion

set iskeyword+=:

set path=.,~,..,
let &path = &path . "," . $OLDPWD

"""" Multibyte Support """"""""""""""""""""""""""""""""""""""""""""""""""""""""
set fileencodings=latin1,utf-8 " encode files in latin1 and utf-8
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8 bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif


"""" Calc """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VT1235 - a calc command
command! -nargs=+ Calc :perl VIM::Msg(<args>)
:cabbrev calc <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Calc' : 'calc')<CR>

"""" CD """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cd to directory of the current file
function! CD()
  if bufname("") !~ "://"
    lcd %:p:h
  endif
endfunction
autocmd BufEnter * call CD()

"""" tips """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Edits the file named as the argument in the ~/Desktop/info directory.
function! s:tips(arg)
  cd ~/Desktop/tips/
  let l:files=split(glob("*".a:arg."*"), "\n")

  if len(l:files)
    for l:file in l:files
      execute "split " . l:file
    endfor
  else
    silent execute "split " . a:arg
    echo "New File : " . a:arg
  endif

endfunc

command! -nargs=1 Tips :silent call s:tips(<q-args>)
cabbrev tips <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Tips' : 'tips')<CR>

"""" MyMap """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" List maps matching argument(s)
command! -nargs=* MyMap :!grep map.*<q-args> ~/.{g,}vimrc
cabbrev mymap <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'MyMap' : 'mymap')<CR>

"""" man """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
runtime ftplugin/man.vim
:cabbrev man <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Man' : 'man')<CR>

"""" Project.vim Tweaks """""""""""""""""""""""""""""""""""""""""""""""""""""""
map <A-S-p> :Project<CR>
map <A-S-o> :Project<CR>:redraw<CR>/
nmap <silent> <F3> <Plug>ToggleProject
let g:proj_window_width = 48
let g:proj_window_increment = 32

"""" Persistent Undo """"""""""""""""""""""""""""""""""""""""""""""""""""""""""

if v:version >= 703   " when undodir was introduced
  set undodir=~/.vim/undo
  set undofile

  au BufWritePre /tmp/* setlocal noundofile
  set undolevels=8192       " maximum number of changes that can be undone
  set undoreload=9216       " maximum number lines to save for undo
                            "  on a buffer reload

  function! ReadUndo()
    let _undofile = &undodir . expand("%:p") . '.undo'

    if filereadable(_undofile)
      silent execute ":rundo " . _undofile
    endif
  endfunc

  function! WriteUndo()
    let _undofile = &undodir . expand("%:p") . '.undo'
    let _undodir = matchstr(_undofile, "^.*\/")

    if !isdirectory(_undodir)
      silent execute "!mkdir -p " . _undodir
    endif
    silent execute "wundo! " . _undofile
  endfunc

  au BufReadPost * call ReadUndo()
  au BufWritePost * call WriteUndo()
endif

"""" AutoHighlightToggle """"""""""""""""""""""""""""""""""""""""""""""""""""""
" http://vim.wikia.com/wiki/Auto_highlight_current_word_when_idle
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'AutoHiglight: OFF'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'AutoHighlight: ON'
    return 1
  endif
endfunction

"""" Save Windows View """"""""""""""""""""""""""""""""""""""""""""""""""""""""
"" http://stackoverflow.com/questions/4251533
if v:version >= 700
  au BufLeave * let b:winview = winsaveview()
  au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif
endif

"""" SuperTab tweaks """"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:SuperTabMidWordCompletion     = 1
" let g:SuperTabDefaultCompletionType = "context"

"""" printexpr """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PrintFile(fname)
  call system("a2ps " . a:fname . " -o /tmp/test/fname")
  call delete(a:fname)
  return v:shell_error
endfunc
set printexpr=PrintFile(v:fname_in)

"""" Autocmds """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufNewFile,Bufread    *.csv     setfiletype csv
autocmd BufNewFile,Bufread    *.ps1     setfiletype ps1
autocmd BufNewFile,Bufread    *.psm1    setfiletype ps1
autocmd FileType perl                   setlocal keywordprg=perldoc\ -T\ -f
                                      " Open_a_Perl_module_from_its_module_name
" autocmd BufWritePost          .vimrc    source ~/.vimrc

"""" Set Viminfo """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set viminfo='10,\"100,:256,%,n~/.vim/viminfo

"""" Reset Cursor Position """"""""""""""""""""""""""""""""""""""""""""""""""""
" http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

"""" abbrevs """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""" Keybindings """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = ","

cnoremap <C-$>                        <End>
cnoremap <C-^>                        <Home>
cnoremap %%                           <C-R>=expand('%:h').'/'<CR>
cnoremap w!!                          %!SUDO_ASKPASS=$(which ssh-askpass) sudo -A tee % > /dev/null

inoremap <A-C-Left>                   <esc>:tabprevious<cr>
inoremap <A-C-Right>                  <esc>:tabnext<cr>
inoremap <C-S>                        <C-O>:update<CR>
inoremap <C-Enter>                    <C-o>o
inoremap <C-S-Enter>                  <C-o>O
inoremap <C-U>                        <C-G>u<C-U>
inoremap <C-W>                        <C-G>u<C-W>

noremap  <buffer> <silent> k          gk
noremap  <buffer> <silent> j          gj
noremap  <buffer> <silent> 0          g0
noremap  <buffer> <silent> $          g$

noremap  <buffer> <silent> <C-e>      5<C-e>
noremap  <buffer> <silent> <C-y>      5<C-y>

nnoremap          .                   .`[
nnoremap          <A-C-Left>          <esc>:tabprevious<cr>
nnoremap          <A-C-Right>         <esc>:tabnext<cr>
nnoremap          <F2>                :NERDTreeToggle<CR>
nnoremap <silent> <C-Tab>             <C-W><C-W>    " control-tab to next window
nnoremap <silent> P                   P`[   " jump back to position after put
nnoremap <silent> p                   p`[   " jump back to position after put
nnoremap <silent> Y                   y$
nnoremap <silent> z/                  :if AutoHighlightToggle()<Bar>set hlsearch<Bar>endif<CR>
nnoremap <silent> z!                  :set hlsearch!<cr>
nnoremap          <leader>.           :ls<cr>:b<space>
nnoremap          <leader>'           :ls<cr>:b<space>
nnoremap          <leader>"           :ls<cr>:vs<space>#
nnoremap <silent> <leader>[           :silent if &virtualedit == ""<cr>set virtualedit=all<cr>else<cr>set virtualedit=<cr>endif<cr>
nnoremap <silent> <leader><space>     :edit #<cr>
nnoremap <silent> <leader><Tab>       <C-w><C-w>
nnoremap <silent> <leader>a           :edit #<cr>
nnoremap <silent> <leader>A           :execute "set titlestring=".input("Set window title to: ")<cr>
nnoremap <silent> <leader><C-a>       :edit #<cr>
nnoremap <silent> <leader>c           :new<cr>:only<cr>
nnoremap          <leader>e           :edit <C-R>=expand('%:h').'/'<CR>
nnoremap          <leader>f           :CommandT<cr>
nnoremap          <leader>ba          :ls<cr>:b<space>
nnoremap          <leader>be          :CommandTBuffer<cr>
nnoremap          <leader>bg          :LustyBufferGrep<cr>
nnoremap <silent> <leader>bc          :close<cr>
nnoremap <silent> <leader>bd          :bdelete<cr>
nnoremap <silent> <leader>bh          :bprevious<cr>
nnoremap <silent> <leader>bj          :blast<cr>
nnoremap <silent> <leader>bk          :bfirst<cr>
nnoremap <silent> <leader>bl          :bnext<cr>
nnoremap          <leader>bs          :ls<cr>:vsplit #
nnoremap          <leader>bS          :ls<cr>:split #
nnoremap          <leader>?           :help 
nnoremap <silent> <leader>,           :edit #<cr>
nnoremap <silent> <leader>g           :silent set visualbell!<cr>
" lusty-explorer.vim:1760
" VIM::command "silent! topleft 1split #{@title}"
nnoremap <silent> <leader>lb          :ls<cr>:LustyBufferExplorer<cr>
nnoremap <silent> <leader>lb          :LustyBufferExplorer<cr>
nnoremap <silent> <leader>lF          :LustyFilesystemExplorer<cr>
nnoremap <silent> <leader>lf          :LustyFilesystemExplorerFromHere<cr>
nnoremap <silent> <leader>lg          :LustyBufferGrep<cr>
nnoremap <silent> <leader>l           :redraw<cr>
nnoremap <silent> <leader>m           g<  " last set of messages
" nnoremap <silent> <leader>>         :new /tmp/exchange<cr>ggP`]a<cr><Esc>"_dGgg:w!<cr> " :close<cr>
" nnoremap <silent> <leader><         :new ~/.tmp/exchange<cr>ggyG<Esc>:w!<cr>:close<cr>
nnoremap <silent> <leader>>           :write! $TMP/exchange<cr>
nnoremap <silent> <leader><           :split  $TMP/exchange<cr>
nnoremap <silent> <leader>ncl         :set cursorline!    cursorline?<cr>
nnoremap <silent> <leader>ncc         :set cursorcolumn!  cursorcolumn?<cr>
nnoremap <silent> <leader>nh          :set hlsearch!      hlsearch?<cr>
nnoremap <silent> <leader>nl          :set list!          list?<cr>
nnoremap <silent> <leader>nm          :if &guioptions =~ 'm'<bar>  set guioptions-=m <bar>else<bar>  set guioptions+=m<bar>endif<cr>
nnoremap <silent> <leader>nn          :if &number == 1<bar>  set relativenumber<bar>else<bar>  set number<bar>endif<cr>
nnoremap <silent> <leader>np          :set paste!         paste?<cr>
nnoremap <silent> <leader>ns          :set spell!         spell?<cr>
nnoremap <silent> <leader>nw          :set wrap!          wrap?<cr>
nnoremap <silent> <leader>nt2         :set ts=2 sw=2 et   ts? sw? et?<cr>
nnoremap <silent> <leader>nt4         :set ts=4 sw=4 et   ts? sw? et?<cr>
nnoremap <silent> <leader>nt8         :set ts=8 sw=8 et   ts? sw? et?<cr>
nnoremap <silent> <leader>oh          :help <C-r><C-a><cr>
nnoremap <silent> <leader>od          :Vexplore<cr>
nnoremap <silent> <leader>oD          :!xdg-open %:h<cr>          
nnoremap <silent> <leader>of          :!xdg-open %:p<cr>
nnoremap <silent> <leader>ovk         :vsplit ~/.vimrc<cr>:1;/keybindings<cr>zt
nnoremap <silent> <leader>otk         :vsplit ~/.tmux.conf<cr>:1;/keybindings<cr>zt
nnoremap <silent> <leader>ofk         :vsplit ~/.fluxbox/keys<cr>
" nnoremap <silent> <leader>oh        "zyw:execute ":help ".@z.""<cr>
nnoremap <silent> <leader>P           "+gP      "paste from gui-clipboard
nnoremap <silent> <leader>Q           :only<cr>
nnoremap <silent> <leader>r           :set wrap!<cr>
nnoremap <silent> <leader>S           :new<cr>
nnoremap <silent> <leader>sa          zg  " add word to dict
nnoremap <silent> <leader>sp          :set spell!<cr>
nnoremap <silent> <leader>sP          :!x-terminal-emulator -e ispell -x -t %<cr>:redraw<cr>
nnoremap          <leader>ta          :tabs<cr>:normal gt<Left><Left>
nnoremap <silent> <leader>tc          :tabnew<cr>
nnoremap <silent> <leader>td          :tabclose<cr>
nnoremap          <leader>te          :ls<cr>:tabedit #
nnoremap          <leader>tf          :tabfind **/*
nnoremap <silent> <leader>th          :tabprevious<cr>
nnoremap          <leader>tips        :cd ~/Desktop/tips<cr>:CommandTFlush<cr>:CommandT<cr>
" nnoremap          <leader>tips      :!(cd ~/Desktop/tips/; find * -type f \| column)<cr>:vsplit ~/Desktop/tips/
nnoremap <silent> <leader>tj          :tablast<cr>
nnoremap <silent> <leader>tk          :tabfirst<cr>
nnoremap <silent> <leader>tl          :tabnext<cr>
nnoremap <silent> <leader>tm          :tabmove<cr>
nnoremap <silent> <leader>tp          :tabprevious<cr><cr>
nnoremap <silent> <leader>tx          :tabdo<space>
nnoremap <silent> <leader>t^          :tabfirst<cr>
nnoremap <silent> <leader>t$          :tablast<cr>
nnoremap <silent> <leader>uv          :!x-terminal-emulator -e urlview % <cr>
nnoremap <silent> <leader>\|          :vnew<cr>
nnoremap <silent> <leader>vg          :vimgrep /<c-r>=expand('<cword>') . '/j **/*' <cr>
nnoremap          <leader>wr          :update<cr>
nnoremap <silent> <leader>x           :close<cr>
nnoremap <silent> <leader>Y           "+y   "copy

vnoremap <silent> <leader>Y           "+y   " copy
vnoremap <silent> <leader>D           "+x   " cut
vnoremap <silent> <leader>d           "+x   " cut
vnoremap <silent> <leader>x           "+x   " cut
vnoremap          z/                  y/<C-R>"<CR>gv " put selected text in the search buffer
vnoremap          <                   <gv   " move cursor to beginning of visual block move
vnoremap          >                   >gv   " move cursor to the end of a visual block move
vnoremap          <leader>##          :s/^/# /<cr>    " shell-type comments
vnoremap          <leader>#"          :s/^/" /<cr>    " vim-type comments
vnoremap          <leader>#//         :s@^@\/\/ @<cr> " c-type comments
vnoremap          <leader>v           :vimgrep <c-r>=expand('<cword>') . ' **/*' <cr>
vnoremap           <C-S>              <C-C>:update<CR>
vnoremap <silent> <leader>[           :silent if &virtualedit == ""<cr>set virtualedit=all<cr>else<cr>set virtualedit=<cr>endif<cr>


"""" Aesthetics """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set t_Co=256
highlight clear
set background=light      
colorscheme koehler

" xterm colors: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
" Line numbers
highlight LineNr ctermfg=lightgreen
" Fold column - left-most column
highlight FoldColumn ctermbg=NONE
" ShowMarks Column
highlight SignColumn ctermbg=NONE
" Search terms
highlight Search term=reverse cterm=reverse
" status line
highlight User1 term=bold cterm=bold ctermfg=22 ctermbg=232

"""" ShowMarks.vim """""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
let g:showmarks_enable = 1
let g:showmarks_textlower = "'\t"
let g:showmarks_textupper = "'\t"
let g:showmarks_textother = "'\t"
" For marks a-z
highlight ShowMarksHLl gui=bold ctermfg=Blue   ctermbg=NONE
" For marks A-Z
highlight ShowMarksHLu gui=bold ctermfg=Red    ctermbg=NONE
" For all other marks
highlight ShowMarksHLo gui=bold ctermfg=Green  ctermbg=NONE
" For multiple marks on the same line
highlight ShowMarksHLm gui=bold ctermfg=Yellow ctermbg=NONE
			
"set cursorline              " highlight the current line
"set cursorcolumn            " highlight the current column
"set colorcolumn=+1            " place a soft margin +1 relative to textwidth
"highlight CursorLine    ctermbg=lightred
"highlight CursorColumn  ctermbg=lightred
"highlight ColorColumn   ctermbg=lightred

"""" ctrlp.vim """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:16,results:16'
let g:ctrlp_switch_buffer = 'Et'
let g:ctrlp_reuse_window = 'netrw\|help\|quickfix'

"""" Environmental Variables """""""""""""""""""""""""""""""""""""""""""""""""
